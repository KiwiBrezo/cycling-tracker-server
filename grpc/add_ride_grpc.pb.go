// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.22.2
// source: add_ride.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AddRideServiceClient is the client API for AddRideService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AddRideServiceClient interface {
	AddRide(ctx context.Context, in *AddRideRequest, opts ...grpc.CallOption) (*AddRideResponse, error)
}

type addRideServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAddRideServiceClient(cc grpc.ClientConnInterface) AddRideServiceClient {
	return &addRideServiceClient{cc}
}

func (c *addRideServiceClient) AddRide(ctx context.Context, in *AddRideRequest, opts ...grpc.CallOption) (*AddRideResponse, error) {
	out := new(AddRideResponse)
	err := c.cc.Invoke(ctx, "/si.um.feri.cycling_tracker_app.grpc.AddRideService/addRide", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AddRideServiceServer is the server API for AddRideService service.
// All implementations must embed UnimplementedAddRideServiceServer
// for forward compatibility
type AddRideServiceServer interface {
	AddRide(context.Context, *AddRideRequest) (*AddRideResponse, error)
	mustEmbedUnimplementedAddRideServiceServer()
}

// UnimplementedAddRideServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAddRideServiceServer struct {
}

func (UnimplementedAddRideServiceServer) AddRide(context.Context, *AddRideRequest) (*AddRideResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRide not implemented")
}
func (UnimplementedAddRideServiceServer) mustEmbedUnimplementedAddRideServiceServer() {}

// UnsafeAddRideServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AddRideServiceServer will
// result in compilation errors.
type UnsafeAddRideServiceServer interface {
	mustEmbedUnimplementedAddRideServiceServer()
}

func RegisterAddRideServiceServer(s grpc.ServiceRegistrar, srv AddRideServiceServer) {
	s.RegisterService(&AddRideService_ServiceDesc, srv)
}

func _AddRideService_AddRide_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRideRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddRideServiceServer).AddRide(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/si.um.feri.cycling_tracker_app.grpc.AddRideService/addRide",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddRideServiceServer).AddRide(ctx, req.(*AddRideRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AddRideService_ServiceDesc is the grpc.ServiceDesc for AddRideService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AddRideService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "si.um.feri.cycling_tracker_app.grpc.AddRideService",
	HandlerType: (*AddRideServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "addRide",
			Handler:    _AddRideService_AddRide_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "add_ride.proto",
}
